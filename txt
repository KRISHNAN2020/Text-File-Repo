CucumberAdvancedProject/
├── src
│   ├── test
│   │   ├── java
│   │   │   ├── pages
│   │   │   │   └── LoginPage.java
│   │   │   ├── runner
│   │   │   │   └── TestRunner.java
│   │   │   ├── stepDefinitions
│   │   │   │   ├── Hooks.java
│   │   │   │   └── LoginSteps.java
│   │   │   └── utils
│   │   │       └── ExcelUtil.java
│   │   └── resources
│   │       ├── features
│   │       │   └── Login.feature
│   │       ├── data.xlsx
│   │       └── log4j2.properties
├── logs
│   └── app.log
├── target
│   ├── cucumber-reports.html
│   └── ExtentReports.html
├── pom.xml
└── testng.xml




package pages;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;

public class LoginPage {
    private WebDriver driver;
    private By usernameField = By.id("username");
    private By passwordField = By.id("password");
    private By loginButton = By.id("loginBtn");
    private By welcomeMessage = By.id("welcome"); // Element to verify successful login

    public LoginPage(WebDriver driver) {
        this.driver = driver;
    }

    public void enterUsername(String username) {
        driver.findElement(usernameField).sendKeys(username);
    }

    public void enterPassword(String password) {
        driver.findElement(passwordField).sendKeys(password);
    }

    public void clickLoginButton() {
        driver.findElement(loginButton).click();
    }

    public boolean isWelcomeMessageDisplayed() {
        return driver.findElement(welcomeMessage).isDisplayed();
    }
}



package stepDefinitions;

import io.cucumber.java.en.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.WebDriver;
import pages.LoginPage;
import utils.ExcelUtil;
import java.util.Map;
import static org.testng.Assert.assertTrue;

public class LoginSteps {
    private static final Logger logger = LogManager.getLogger(LoginSteps.class);
    private WebDriver driver = Hooks.driver;
    private LoginPage loginPage;

    @Given("User is on the login page")
    public void user_is_on_the_login_page() {
        driver.get("https://example.com/login"); // Replace with actual URL
        loginPage = new LoginPage(driver);
        logger.info("Navigated to login page");
    }

    @When("User enters username {string} and password {string}")
    public void user_enters_username_and_password(String username, String password) {
        loginPage.enterUsername(username);
        loginPage.enterPassword(password);
        logger.info("Entered username and password");
    }

    @When("User enters credentials from Excel sheet {string} row {int}")
    public void user_enters_credentials_from_excel(String sheetName, int rowNum) {
        Map<String, String> data = ExcelUtil.getRowData(sheetName, rowNum);
        String username = data.get("username");
        String password = data.get("password");
        loginPage.enterUsername(username);
        loginPage.enterPassword(password);
        logger.info("Entered credentials from Excel: " + username + ", " + password);
    }

    @When("Clicks on the login button")
    public void clicks_on_the_login_button() {
        loginPage.clickLoginButton();
        logger.info("Clicked on login button");
    }

    @Then("User should be logged in successfully")
    public void user_should_be_logged_in_successfully() {
        assertTrue(loginPage.isWelcomeMessageDisplayed(), "Welcome message not displayed. Login failed.");
        logger.info("Verified successful login");
    }
}



Feature: Login Functionality

  Scenario Outline: Login with different credentials
    Given User is on the login page
    When User enters username "<username>" and password "<password>"
    And Clicks on the login button
    Then User should be logged in successfully

    Examples:
      | username | password |
      | user1    | pass1    |
      | user2    | pass2    |

  Scenario: Login with data from Excel
    Given User is on the login page
    When User enters credentials from Excel sheet "Sheet1" row 1
    And Clicks on the login button
    Then User should be logged in successfully



package stepDefinitions;

import io.cucumber.java.After;
import io.cucumber.java.Before;
import io.cucumber.java.Scenario;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class Hooks {
    public static WebDriver driver;

    @Before
    public void setUp() {
        driver = new ChromeDriver();
        driver.manage().window().maximize();
    }

    @After
    public void tearDown(Scenario scenario) {
        if (scenario.isFailed()) {
            byte[] screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.BYTES);
            scenario.attach(screenshot, "image/png", "Screenshot on Failure");
        }
        if (driver != null) {
            driver.quit();
        }
    }
}



package runner;

import io.cucumber.testng.AbstractTestNGCucumberTests;
import io.cucumber.testng.CucumberOptions;

@CucumberOptions(
    features = "src/test/resources/features",
    glue = {"stepDefinitions"},
    plugin = {"pretty", "html:target/cucumber-reports.html",
              "com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter:"}
)
public class TestRunner extends AbstractTestNGCucumberTests {
}



package utils;

import java.util.HashMap;
import java.util.Map;

public class ExcelUtil {
    public static Map<String, String> getRowData(String sheetName, int rowNum) {
        // Dummy implementation - replace with actual Excel reading logic
        Map<String, String> data = new HashMap<>();
        data.put("username", "excelUser");
        data.put("password", "excelPass");
        return data;
    }
}



appenders = console, file
appender.console.type = Console
appender.console.name = STDOUT
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n

appender.file.type = File
appender.file.name = LOGFILE
appender.file.fileName = logs/app.log
appender.file.layout.type = PatternLayout
appender.file.layout.pattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n

rootLogger.level = info
rootLogger.appenderRefs = console, file
rootLogger.appenderRef.console.ref = STDOUT
rootLogger.appenderRef.file.ref = LOGFILE




<dependencies>
    <dependency>
        <groupId>io.cucumber</groupId>
        <artifactId>cucumber-java</artifactId>
        <version>7.14.0</version>
    </dependency>
    <dependency>
        <groupId>io.cucumber</groupId>
        <artifactId>cucumber-testng</artifactId>
        <version>7.14.0</version>
    </dependency>
    <dependency>
        <groupId>org.seleniumhq.selenium</groupId>
        <artifactId>selenium-java</artifactId>
        <version>4.15.0</version>
    </dependency>
    <dependency>
        <groupId>com.aventstack</groupId>
        <artifactId>extentreports</artifactId>
        <version>5.1.1</version>
    </dependency>
    <dependency>
        <groupId>tech.grasshopper</groupId>
        <artifactId>extentreports-cucumber7-adapter</artifactId>
        <version>1.14.0</version>
    </dependency>
    <dependency>
        <groupId>org.apache.logging.log4j</groupId>
        <artifactId>log4j-core</artifactId>
        <version>2.22.0</version>
    </dependency>
    <dependency>
        <groupId>org.testng</groupId>
        <artifactId>testng</artifactId>
        <version>7.8.0</version>
    </dependency>
</dependencies>



<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd">
<suite name="Cucumber Suite" parallel="tests" thread-count="2">
    <test name="Cucumber Test">
        <classes>
            <class name="runner.TestRunner"/>
        </classes>
    </test>
</suite>