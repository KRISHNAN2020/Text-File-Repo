

Browser Launch :

 WebDriverManager.chromedriver().setup();
        driver = new ChromeDriver();
        driver.manage().window().maximize();

****************************************************************************************************************************************************************

Taking Screenshot :

TakesScreenshot screenshot = (TakesScreenshot) driver;

            // Capture screenshot as a File
            File screenshotFile = screenshot.getScreenshotAs(OutputType.FILE);

            // Define destination file
            File destination = new File("screenshots/screenshot.png");

            // Save screenshot using FileUtils
            FileUtils.copyFile(screenshotFile, destination);

****************************************************************************************************************************************************************

Handling Multiple Windows :

String parentWindow = driver.getWindowHandle();
driver.findElement(By.linkText("Click Here")).click();
Set<String> allWindows = driver.getWindowHandles();
for (String handle : allWindows) {
    if (!handle.equals(parentWindow)) {
        driver.switchTo().window(handle);
        break;
    }
}
driver.switchTo().window(parentWindow);

****************************************************************************************************************************************************************

Handling Tables in Webpage :

// Locate the table by ID
            WebElement table = driver.findElement(By.id("table1"));

            // Get all rows in the table
            List<WebElement> rows = table.findElements(By.tagName("tr"));

            // Iterate through rows and print table contents
            System.out.println("Table Contents:");
            for (int i = 0; i < rows.size(); i++) {
                // Get all cells in the current row
                List<WebElement> cells = rows.get(i).findElements(By.tagName("td"));
                for (int j = 0; j < cells.size(); j++) {
                    System.out.print(cells.get(j).getText() + "\t");
                }
                System.out.println(); // New line after each row
            }

            // Get the value of a specific cell (e.g., row 2, column 3)
            int targetRow = 2; // 1-based index for readability (row 2)
            int targetColumn = 3; // 1-based index (column 3)
            WebElement specificCell = rows.get(targetRow - 1).findElements(By.tagName("td")).get(targetColumn - 1);
            String cellValue = specificCell.getText();
            System.out.println("\nValue of cell at row " + targetRow + ", column " + targetColumn + ": " + cellValue);

****************************************************************************************************************************************************************


Get a particular Cell Value from a Excel Sheet


import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import java.io.FileInputStream;
import java.io.IOException;

public class ReadExcelCell {
    public static void main(String[] args) {
        // Step 1: Specify the path to the Excel file
        String excelFilePath = "C:/TestData.xlsx";

        try {
            // Step 2: Create a FileInputStream to read the Excel file
            FileInputStream fileInputStream = new FileInputStream(excelFilePath);

            // Step 3: Create a Workbook instance (for .xlsx files)
            Workbook workbook = new XSSFWorkbook(fileInputStream);

            // Step 4: Get the first sheet ("Sheet1")
            Sheet sheet = workbook.getSheet("Sheet1");

            // Step 5: Specify the row and column to read (e.g., row 1, column 0 for "user1")
            int rowNumber = 1; // Row 1 (0-based index)
            int columnNumber = 0; // Column 0 (0-based index)
            Row row = sheet.getRow(rowNumber);
            Cell cell = row.getCell(columnNumber);

            // Step 6: Get the cell value as a string
            String cellValue = cell.getStringCellValue();
            System.out.println("Cell value at row " + rowNumber + ", column " + columnNumber + ": " + cellValue);

            // Step 7: Optionally, use the cell value in a Selenium test
            WebDriver driver = new ChromeDriver();
            driver.get("https://example.com/login"); // Replace with your login page URL
            // Example: Use the cell value (e.g., "user1") to fill a username field
            // driver.findElement(By.id("username")).sendKeys(cellValue);

            // Step 8: Close resources
            workbook.close();
            fileInputStream.close();
            driver.quit();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}



***********************************************************************************************************************************************


Creating Extent Reports for Cucumber Project


import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.reporter.ExtentSparkReporter;
import io.cucumber.java.After;
import io.cucumber.java.Before;
import io.cucumber.java.Scenario;

public class ExtentCucumberIntegration {
    private static ExtentReports extent;
    private ExtentTest test;

    // Initialize Extent Reports
    public static ExtentReports getExtent() {
        if (extent == null) {
            ExtentSparkReporter spark = new ExtentSparkReporter("target/ExtentReport.html");
            extent = new ExtentReports();
            extent.attachReporter(spark);
        }
        return extent;
    }

    @Before
    public void beforeScenario(Scenario scenario) {
        extent = getExtent();
        test = extent.createTest(scenario.getName());
    }

    @After
    public void afterScenario(Scenario scenario) {
        if (scenario.isFailed()) {
            test.fail("Scenario failed");
        } else {
            test.pass("Scenario passed");
        }
        extent.flush(); // Generate report
    }
}

***********************************************************************************************************************************************

Create TextNg Support for a cucumber project

Testng xml File :

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Cucumber Test Suite" parallel="tests" thread-count="4">
    <test name="Cucumber Tests">
        <classes>
            <class name="runner.TestRunner"/>
        </classes>
    </test>
</suite>

Test runner File :

package parallel;
import io.cucumber.testng.AbstractTestNGCucumberTests;
import org.testng.annotations.DataProvider;
public class RunCucumberTest extends AbstractTestNGCucumberTests {
  @Override
  @DataProvider(parallel = true)
  public Object[][] scenarios() {
    return super.scenarios();
  }
}

*****************************************************

 String day = "Wednesday"; // Input day as a String

        switch (day) {
        case "Monday":
            System.out.println("Start of the work week!");
            break;
        case "Tuesday":
            System.out.println("Second day of the work week.");
            break;
        case "Wednesday":
            System.out.println("Midweek day!");
            break;
        default:
            System.out.println("Invalid day entered.");
            break;
    }

        display();

